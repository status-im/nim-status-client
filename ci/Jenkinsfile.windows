library 'status-react-jenkins@v1.2.4'

pipeline {
  agent { label 'windows' }

  options {
    timestamps()
    /* Prevent Jenkins jobs from running forever */
    timeout(time: 25, unit: 'MINUTES')
    /* manage how many builds we keep */
    buildDiscarder(logRotator(
      numToKeepStr: '10',
      daysToKeepStr: '30',
    ))
  }

  environment {
    TARGET = 'windows'
    /* Improve make performance */
    MAKEFLAGS = '-j4'
    /* Disable colors in Nim compiler logs */
    NIMFLAGS = '--colors:off'
    /* Makefile assumes the compiler folder is included */
    QTDIR = '/c/Qt/5.14.2/msvc2017_64'
    Qt5_DIR = '/c/Qt/5.14.2/msvc2017_64'
    VCINSTALLDIR = '/c/BuildTools/VC'
    /* Control output the filename */
    STATUS_CLIENT_ZIP = "pkg/${utils.pkgFilename('zip')}"
    /* Adjust path for correct access to build toos */
    PATH = [
      "${QTDIR}/bin",
      '/c/ProgramData/scoop/apps/gcc/current/bin',
      '/c/ProgramData/scoop/apps/git/current/bin',
      '/c/ProgramData/scoop/apps/git/current/usr/bin',
      '/c/BuildTools/MSBuild/Current/Bin',
      '/c/BuildTools/VC/Tools/MSVC/14.27.29110/bin',
      '/c/ProgramData/scoop/shims',
      '/c/ProgramData/scoop/apps/pypy3/current/Scripts',
    ].join(':')
  }

  stages {
    stage('Deps') {
      steps {
        /* avoid re-compiling Nim by using cache */
        cache(maxCacheSize: 250, caches: [[
          $class: 'ArbitraryFileCache',
          includes: '**/*',
          path: 'vendor/nimbus-build-system/vendor/Nim/bin'
        ]]) {
          sh 'make deps'
        }
      }
    }

    stage('status-go') {
      steps { sh 'make status-go' }
    }

    stage('Package') {
      steps { 
        withCredentials([string(
          credentialsId: utils.getInfuraTokenCred(),
          variable: 'INFURA_TOKEN'
        )]) {
          sh "make ${env.STATUS_CLIENT_ZIP}"
        }
      }
    }

    stage('Parallel Upload') {
      parallel {
        stage('Upload') {
          steps { script {
            env.PKG_URL = s3.uploadArtifact(env.STATUS_CLIENT_ZIP)
            jenkins.setBuildDesc(Zip: env.PKG_URL)
          } }
        }
        stage('Archive') {
          steps { script {
            archiveArtifacts(env.STATUS_CLIENT_ZIP)
          } }
        }
      }
    }
  }
  post {
    success { script { github.notifyPR(true) } }
    failure { script { github.notifyPR(false) } }
    always { cleanWs() }
  }
}
